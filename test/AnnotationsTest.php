<?php

namespace PhpPkg\Annotations\Test;

use PHPUnit\Framework\TestCase;
use PhpPkg\Annotations\Annotations;
use Base\Annotation\PermissionAnnotation;
use Base\Annotation\RoleAnnotation;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-01 at 09:26:44.
 */
class AnnotationsTest extends TestCase
{
    /**
     * @var Annotations
     */
    protected $annotations;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->annotations = new Annotations;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers Annotations::setDefaultNamespace
     */
    public function testSetDefaultNamespace()
    {
        $this->annotations->setDefaultNamespace('\Base\Annotation\\');
        $this->annotations->setStrict(true);

        $this->assertEquals('\Base\Annotation\\', $this->annotations->getDefaultAnnotationNamespace());

        return $this->annotations;
    }

    /**
     * @covers  Annotations::getClassAnnotations
     * @depends testSetDefaultNamespace
     * @param Annotations $annotations
     * @throws \ReflectionException
     */
    public function testGetClassAnnotations($annotations)
    {
        $result = $annotations->getClassAnnotations('User', true);

        $expected = [
            'Defaults' => [
                'name' => 'user1',
                'lastname' => 'sample',
                'age' => 0,
                'address' => [
                    'country' => 'USA',
                    'state' => 'NY'
                ],
                'phone' => '000-00000000'
            ],
            'assertResult' => [
                0 => false
            ],
            'cache' => [
                'collation' => 'UTF-8'
            ]
        ];

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers  Annotations::getMethodAnnotations
     * @param Annotations $annotations
     * @depends testSetDefaultNamespace
     */
    public function testGetMethodAnnotations($annotations)
    {
        $result = $annotations->getMethodAnnotations('User', 'load', true);

        $expected = [
            'cache' => [0 => true],
            'type' => [0 => 'json'],
            'limits' => [
                'start' => 10,
                'limit' => 50
            ]
        ];

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers  Annotations::getMethodAnnotationsObjects
     * @param Annotations $annotations
     * @depends testSetDefaultNamespace
     */
    public function testGetMethodAnnotationsObjects($annotations)
    {
        $result = $annotations->getMethodAnnotationsObjects('User', 'create', true);

        $this->assertCount(2, $result);
        $this->assertArrayHasKey('Permission', $result);
        $this->assertArrayHasKey('Role', $result);
        $this->assertInstanceOf(PermissionAnnotation::class, $result['Permission']);
        $this->assertInstanceOf(RoleAnnotation::class, $result['Role']);
    }
}

